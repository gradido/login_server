syntax = "proto3";

package proto;

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

import "BasicTypes.proto";
import "Duration.proto";
import "Timestamp.proto";

/*
At consensus, updates the fields of a smart contract to the given values.

If no value is given for a field, that field is left unchanged on the contract. For an immutable smart contract (that is, a contract created without an adminKey), only the expirationTime may be updated; setting any other field in this case will cause the transaction status to resolve to MODIFYING_IMMUTABLE_CONTRACT.

--- Signing Requirements ---
1. Whether or not a contract has an adminKey, its expirationTime can be extended with only the transaction payer's signature.
2. Updating any other field of a mutable contract requires the adminKey's signature.
3. If the update transaction includes a new adminKey, this new key must also sign. */
message ContractUpdateTransactionBody {
    // The id of the contract to be updated
    ContractID contractID = 1;
    // The new expiry of the contract, no earlier than the current expiry (resolves to EXPIRATION_REDUCTION_NOT_ALLOWED otherwise)
    Timestamp expirationTime = 2;
    // The new key to control updates to the contract
    Key adminKey = 3;
    // (NOT YET IMPLEMENTED) The new id of the account to which the contract is proxy staked
    AccountID proxyAccountID = 6;
    // (NOT YET IMPLEMENTED) The new interval at which the contract will pay to extend its expiry (by the same interval)
    Duration autoRenewPeriod = 7;
    // The new id of the file asserted to contain the bytecode of the Solidity transaction that created this contract
    FileID fileID = 8;
    // The new contract memo, assumed to be Unicode encoded with UTF-8 (at most 100 bytes)
    string memo = 9;
}

